// src/highlight.js
var Q = "_?[PpIiCcAaMm]+[-rg#+O]*";
var O = "[HhLlFfBbXxYy]+";
var dir = "[HLFBXY]";
var grammar = [
  ["\\[[^\\]]*\\]", "h2"],
  [`(${Q}):(${O})`, (r) => [["q", r[1]], ["sep", ":"], ["o", r[2]]]],
  [`[A-Z][a-z]{2}${dir}*`, "l"],
  [`${dir}+(?![hlfbxy])`, "l"],
  [Q, "q"],
  [O, "o"],
  ["[+^7><w]w?", "e"],
  ["[$%/8]", "g"],
  ["[-?[>23]", "d"],
  [`[(]${dir}+[)]`, "arc"],
  [`[(]${dir}+,${dir}+[)]`, "arc"],
  ["[*]", "c"],
  ["[=~&]", "sym"],
  ["[RN!]", "dyn"],
  ["[: ]", "sep"],
  ["[^: *]+", "unknown"]
];
grammar.forEach((rule) => {
  rule[0] = new RegExp("^" + rule[0]);
});
function lex(sn) {
  let pos = 0;
  const ret = [];
  while (pos < sn.length) {
    const sl = sn.slice(pos);
    for (const [re, rule] of grammar) {
      re.lastIndex = 0;
      const r = re.exec(sl);
      if (!r)
        continue;
      if (typeof rule == "function") {
        ret.push(...rule(r));
      } else {
        ret.push([rule, r[0]]);
      }
      pos += r[0].length;
      break;
    }
  }
  return ret;
}
function Signotation({ sn }) {
  const tokens = lex(sn);
  return <span className="signotation">{tokens.map(([cn, text], i) => <span
    key={i}
    className={cn}
  >{text}</span>)}</span>;
}

// src/signotator.js
import { useState as useState5 } from "react";

// src/q.js
import { useState } from "react";
function FingerDrawing({ name }) {
  return <svg style={{
    width: "100%",
    padding: 0,
    fill: "none",
    strokeWidth: 1.25,
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }} viewBox="0 0 32 32"><path d={fingers[name]} /></svg>;
}
function Q2({ done }) {
  const [picam, setPicam] = useState(null);
  const [flex, setFlex] = useState("");
  const [touch, setTouch] = useState("");
  const [others, setOthers] = useState(false);
  const [indeP, setIndeP] = useState(false);
  function reset() {
    setPicam(null);
    setFlex("");
    setTouch("");
    setOthers(false);
    setIndeP(false);
  }
  function finish() {
    let q = "";
    if (picam) {
      if (flex == "")
        q = picam.toUpperCase();
      else
        q = picam;
      if (indeP) {
        q = q.replace(/p/i, (m) => m == "p" ? "P" : "p");
      }
      if (flex !== "c")
        q += flex;
      q += touch;
      if (others)
        q += "O";
    }
    done(q, "O");
  }
  function SelButton({ opts }) {
    const choice = opts.find((o) => o[0] == picam || o[1] == picam) || opts[0];
    const holi = choice[3];
    const actual = holi ? picam == choice[1] && flex == holi[0] && touch == holi[1] && others == holi[2] : picam == choice[1];
    return <button
      disabled={holi === void 0 && !actual && picam !== null && picam !== choice[0]}
      className={actual ? "actual" : ""}
      onClick={() => {
        if (actual)
          reset();
        else {
          setPicam(choice[1]);
          if (choice[3]) {
            setFlex(choice[3][0]);
            setTouch(choice[3][1]);
            setOthers(choice[3][2]);
          }
        }
      }}
    ><FingerDrawing name={choice[2]} /></button>;
  }
  function ToggleButton({ enabled, actual, onClick, display }) {
    return <button
      disabled={!enabled}
      className={actual ? "actual" : ""}
      onClick={actual ? reset : onClick}
    ><FingerDrawing name={display} /></button>;
  }
  return <div><table><tbody>
    <tr>
      <td><SelButton opts={[
        [null, "i", "I"],
        ["p", "pi", "L"],
        ["m", "im", "IM"]
      ]} /></td>
      <td><SelButton opts={[
        [null, "ic", "V"],
        ["p", "pic", "H"]
      ]} /></td>
      <td><SelButton opts={[
        [null, "c", "C"],
        ["ic", "ica", "W"],
        ["p", "pc", "PC"]
      ]} /></td>
      <td className="!border-l"><ToggleButton
        enabled={picam && picam[0] == "p"}
        actual={indeP}
        display={flex == "" ? "indePcur" : "indePext"}
        onClick={() => setIndeP(!indeP)}
      /></td>
    </tr>
    <tr>
      <td><SelButton opts={[
        [null, "p", "P"],
        ["i", "pi", "L"],
        ["ic", "pic", "H"],
        ["icam", "picam", "OO"],
        ["c", "pc", "PC"],
        ["m", "pm", "PM"]
      ]} /></td>
      <td><SelButton opts={[
        [null, "m", "M"],
        ["p", "pm", "PM"],
        ["i", "im", "IM"]
      ]} /></td>
      <td><SelButton opts={[
        [null, "icam", "B"],
        ["p", "picam", "OO"],
        ["c", "ca", "CA"]
      ]} /></td>
      <td className="!border-l"><SelButton opts={[[null, "picam", "#", ["#", "", false]]]} /></td>
    </tr>
    <tr>
      <td className="!border-y"><ToggleButton
        enabled={true}
        actual={flex == ""}
        display="E"
        onClick={() => setFlex("")}
      /></td>
      <td className="!border-y"><ToggleButton
        enabled={true}
        actual={flex == "c"}
        display="c"
        onClick={() => setFlex("c")}
      /></td>
      <td className="!border-y"><ToggleButton
        enabled={true}
        actual={flex == "r"}
        display="r"
        onClick={() => setFlex("r")}
      /></td>
      <td className="!border-b"><ToggleButton
        enabled={true}
        actual={flex == "g"}
        display="g"
        onClick={() => setFlex("g")}
      /></td>
    </tr>
    <tr>
      <td><SelButton opts={[
        [null, "pcam", "D", ["c", "+", true]],
        //pcam+O
        ["pi", "ip", "T", ["r", "", true]],
        // iprO
        ["ic", "ci", "R", ["", "", false]]
      ]} /></td>
      <td className="!border-l !border-b"><ToggleButton
        enabled={["ic", "ica", "icam", "pi", "pc", "pic", "picam"].includes(picam)}
        actual={touch == "-"}
        display="-"
        onClick={() => setTouch("-")}
      /></td>
      <td className="!border-r !border-b"><ToggleButton
        enabled={picam?.startsWith("p") && ["c", "r", "g"].includes(flex)}
        actual={touch == "+"}
        display="+"
        onClick={() => setTouch("+")}
      /></td>
      <td className="!border-b"><ToggleButton
        enabled={picam?.length < 5}
        actual={others}
        display="O"
        onClick={() => setOthers(!others)}
      /></td>
    </tr>
    <tr>
      <td><SelButton opts={[[null, "pi", "F", ["r", "-", true]]]} /></td>
      <td><SelButton opts={[[null, "pi", "S", ["c", "-", true]]]} /></td>
      <td><SelButton opts={[[null, "pi", "LL", ["g", "+", false]]]} /></td>
      <td className="!border-l"><button className="finish" onClick={finish}>{"\u2714"}</button></td>
    </tr>
  </tbody></table></div>;
}
var fingers = {
  I: "M 21.632967,18.621557 V 4.4961178 M 9.0720237,21.341853 l 2.9712633,-2.811166 4.45726,-1.112567 5.13242,1.203438 -0.0678,5.96757 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.21688 H 10.885788 C 9.0871737,27.741978 9.0720437,21.341853 9.0720437,21.341853 Z",
  V: "M 16.633388,17.034058 15.548592,3.3312858 M 21.039177,17.994713 23.905107,4.4671228 M 8.8598917,21.453978 l 3.1499063,-3.282582 4.62359,-1.137338 4.405789,0.960655 0.18587,6.594415 c 0.004,2.34863 -0.5366,3.74983 -1.404956,4.21688 h -9.27442 c -1.7986203,-1.06403 -1.6857793,-7.35203 -1.6857793,-7.35203 z",
  C: "M 16.195258,17.034057 V 2.9086168 m -7.0433503,17.9837112 3.0783903,-2.645381 3.96496,-1.21289 5.437789,1.642504 -0.0679,5.912566 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.216881 H 10.885768 C 9.0871477,27.741977 9.1519077,20.892328 9.1519077,20.892328 Z",
  B: "m 9.1519077,20.892322 -5.0135,-6.925011 M 12.595408,18.24694 7.7461077,5.9408498 M 16.633388,17.034055 V 2.9086138 M 21.633047,18.092384 24.142577,4.9073928 M 9.1519077,20.892322 12.595408,18.24694 l 4.03798,-1.212885 4.999659,1.058333 -0.0679,6.496736 c 0.004,2.348638 -0.5366,3.749831 -1.40496,4.216884 H 10.885768 C 9.0871477,27.741978 9.1519077,20.892322 9.1519077,20.892322 Z",
  P: "m 21.188314,24.73181 h 5.16386 m -17.8231,-3.63434 3.259661,-2.87455 5.317869,-0.73937 4.22432,1.48106 -0.14261,5.7672 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.21688 h -9.27442 c -1.79862,-1.06403 -1.97986,-7.85122 -1.97986,-7.85122 z",
  M: "m 9.1519137,20.892318 -5.013502,-6.92501 m 5.013502,6.92501 3.4434993,-2.64538 4.444216,-0.81019 4.541178,1.46307 -0.0157,5.68931 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 h -9.274374 c -1.7986193,-1.06403 -1.7338593,-7.91369 -1.7338593,-7.91369 z",
  OO: "m 21.528451,24.73181 h 6.36988 M 9.1151711,21.035 4.1016691,14.10999 M 12.558671,18.38962 7.7093711,6.08354 m 8.8872799,11.0932 V 3.05131 m 4.99966,15.18376 2.50953,-13.18499 M 9.1151711,21.035 l 3.4434999,-2.64538 4.03798,-1.21288 4.99966,1.05833 -0.0679,6.49674 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 h -9.27442 C 9.0504111,27.88466 9.1151711,21.035 9.1151711,21.035 Z",
  "#": "m 8.5658107,20.954788 3.2596603,-2.87455 5.31787,-0.73937 4.224316,1.48106 -0.14261,5.7672 c 0.004,2.34864 -0.5366,3.74983 -1.404956,4.21688 h -9.27442 c -1.7986203,-1.06403 -1.9798603,-7.85122 -1.9798603,-7.85122 z",
  L: "m 21.528455,24.73181 h 6.65515 m -6.58733,-5.4384 V 5.167967 m -12.56094,16.845743 2.97126,-2.81117 4.45726,-1.11257 5.13242,1.20344 -0.0678,5.96757 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.21688 h -9.27442 c -1.79862,-1.06403 -1.81374,-7.46415 -1.81374,-7.46415 z",
  IM: "M 21.632967,18.621558 V 4.4961158 M 9.0720227,21.341858 l 2.9712643,-2.81117 4.45726,-1.11257 5.13242,1.20344 -0.0678,5.96757 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.21688 h -9.274419 c -1.7986203,-1.06403 -1.8137453,-7.46415 -1.8137453,-7.46415 z m 0,0 -5.013499,-6.92501",
  H: "m 21.528451,24.20264 h 6.74399 M 16.678581,17.17673 15.134331,3.52559 m 6.25983,14.92161 3.11858,-13.5011 M 9.1632495,21.59666 12.31316,18.31407 l 4.365421,-1.13734 4.71558,1.27047 0.13425,6.28461 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 H 10.84903 C 9.0504095,27.88466 9.1632495,21.59666 9.1632495,21.59666 Z",
  W: "M 12.386398,18.134888 7.7703777,5.6306078 M 16.569268,17.034058 16.580768,2.8065378 M 21.379277,17.994718 24.245207,4.4671278 M 9.1999877,21.453978 l 3.1864203,-3.31909 4.18287,-1.10083 4.809999,0.96066 0.18587,6.59441 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 h -9.274419 c -1.7986203,-1.06403 -1.6857803,-7.35203 -1.6857803,-7.35203 z",
  PM: "m 21.528519,24.73181 h 6.417351 m -18.8306299,-3.16764 -5.0135,-6.92501 m 5.0135,6.92501 3.4434999,-2.64538 4.444216,-0.81019 4.541179,1.46307 -0.01566,5.68931 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 H 10.8491 C 9.0504801,28.41383 9.1152401,21.56417 9.1152401,21.56417 Z",
  PC: "m 21.528475,25.26098 h 6.528179 M 16.158585,17.70591 V 3.58047 m -7.04335,17.98371 3.07839,-2.64538 3.96496,-1.21289 5.43779,1.6425 -0.0679,5.91257 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.21688 h -9.27442 c -1.79862,-1.06403 -1.73386,-7.91368 -1.73386,-7.91368 z",
  CA: "M 12.319102,18.413748 10.516952,4.8541078 m 6.53279,12.8276802 -0.46894,-14.3460802 m -7.4625613,18.2659302 3.2008713,-3.18789 4.73064,-0.73196 4.494365,1.27819 0.0211,6.15832 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 h -9.274425 c -1.7986213,-1.06403 -1.7675613,-7.73354 -1.7675613,-7.73354 z",
  E: "m 27.726152,4.016506 c -1.17199,5.104375 1.37715,5.700463 1.37715,5.700463 m -7.04705,18.443028 V 8.335758 c 0,-4.678522 3.99949,-5.224736 7.16249,-4.178137 v 20.013235 c 0.68023,1.24683 1.11137,2.527567 0,4.018291",
  r: "m 2.9259217,23.173801 c 5.10438,1.17199 5.70046,-1.37715 5.70046,-1.37715 M 21.235122,28.429729 H 7.2451717 c -4.67852,0 -5.22473,-3.585518 -4.17813,-6.748508 H 23.080272 c 4.1765,-0.926525 8.12964,1.615055 6.13847,6.507926",
  c: "m 7.8389319,14.822501 c 5.2371601,-0.018 5.2327201,-2.382255 5.2327201,-2.382255 m 8.9846,15.719751 c 0.13189,-3.906077 0.085,-5.718536 -0.60731,-7.59455 -1.33499,-0.855839 -4.02985,-1.81894 -5.02882,-2.908704 l -3.75855,0.668165 C 8.8566019,19.001325 7.3365119,16.654915 7.6373519,13.336877 11.076662,12.220046 13.364542,11.843264 17.834682,11.852998 c 2.64325,0.123336 7.24844,2.108393 8.26336,4.000197 2.28764,2.964743 3.66768,8.064493 3.12071,12.335952",
  g: "m 14.484612,21.895343 c 2.45316,-4.627114 -0.0332,-6.580928 -0.0332,-6.580928 m 7.50726,12.45528 0.29273,-10.337049 -1.32678,-0.03954 -0.81337,1.74063 c -1.63116,3.490739 -5.23236,3.910918 -7.42316,2.06709 l 2.89739,-8.060809 c 0.61323,-2.011723 2.81753,-1.932408 2.81753,-1.932408 l 8.76422,0.173716 c 0,0 2.1462,0.111861 2.05151,2.366471 v 10.42306 c 0.68023,1.24683 1.11137,2.527573 0,4.018295",
  "-": "m 23.747558,14.131607 h 4.351861 m -2.735887,1.876019 -1.615974,-1.876019 1.612254,-1.875018 M 6.8515098,14.131607 H 2.4996487 m 2.7358868,1.876018 1.6159743,-1.876018 -1.612254,-1.875019 M 21.665695,24.820549 h 6.36988 m -18.7831603,-3.69681 0.1900955,-9.49296 m 3.4258968,6.84758 -0.01704,-13.3662656 M 17.009883,17.265479 V 3.1400494 M 21.595561,18.323809 21.047814,5.1087444 M 9.2524149,21.123739 l 3.6159921,-2.64538 4.141476,-1.21288 4.585678,1.05833 0.07009,6.49674 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 h -9.274416 c -1.7986203,-1.06403 -1.7338603,-7.91369 -1.7338601,-7.91369 z",
  "+": "m 2.6421692,20.140237 c 4.729821,0.572425 3.725537,3.129823 3.725537,3.129823 M 19.72991,22.986113 c -1.674703,-1.899065 -4.08688,-3.956243 -7.102425,-4.712234 -3.9568278,-0.991968 -8.1346168,-1.120392 -9.2531818,0.09617 -1.118564,1.21656 -1.039974,4.052473 -1.039974,4.052473 l 5.903536,1.472267 c 0.608186,0.455094 0.940848,1.052286 2.1196298,1.213104 1.382207,0.8618 2.659967,1.775527 2.879529,3.215346 M 5.7822502,25.660364 v 4.351861 m -1.876019,-2.735887 1.876019,-1.615974 1.875018,1.612254 M 5.7822502,6.7643171 v -4.351861 m -1.876018,2.735887 1.876018,1.615974 1.875019,-1.612254 m -4.60312,5.8807869 c 5.104381,1.17199 5.70046,-1.3771489 5.70046,-1.3771489 M 21.753657,15.943793 H 7.3733992 c -4.67852,0 -5.22473,-3.240533 -4.17813,-6.4035219 H 23.598807 c 3.809067,-0.3692698 6.656722,0.8867819 6.865962,4.1409209",
  O: "m 19.508495,25.322512 h 7.443186 m -3.721593,-3.997496 v 7.994993 M 9.7853375,20.85842 4.7718275,13.93341 M 13.228837,18.21304 8.3795375,5.9069623 M 17.266817,17.00016 V 2.8747323 M 16.788405,28.77211 H 11.519197 C 9.7205775,27.70808 9.7853375,20.85842 9.7853375,20.85842 l 3.4434995,-2.64538 4.03798,-1.21288 4.99966,1.05833",
  D: "m 9.5312443,20.603456 2.9210597,4.495827 m 4.50744,-8.41956 c -0.55159,1.90606 -1.34731,3.092182 -1.21719,7.008665 m -3.24007,-5.896098 c -0.0912,2.321192 -0.39396,3.723156 1.54435,6.395408 m 7.602818,1.333469 c -2.210168,0.676253 -4.146378,1.147311 -6.416948,-0.567038 M 22.092163,17.88316 V 3.7577202 M 11.344984,28.067611 C 9.5463743,27.003581 9.5312443,20.603456 9.5312443,20.603456 h -2e-5 c 0.6350697,-1.281379 1.6801697,-2.036854 2.9712597,-2.811166 1.29109,-0.774312 2.96228,-1.05446 4.45726,-1.112567 1.61585,-0.0628 3.396131,0.676678 5.132419,1.203438 l -0.0678,5.96757 c 0.004,2.34864 -0.5366,3.74983 -1.40496,4.21688 M 11.725184,6.5895262 v 6.9280978 c 1.91354,0 5.48194,0.475944 5.48194,-3.365559 0,-4.0779328 -3.81128,-3.5625388 -5.48194,-3.5625388 z",
  T: "m 20.837897,22.912268 5.284986,-5.716827 m -17.6982676,4.020016 -5.0135,-6.925009 M 11.868115,18.570077 7.0188154,6.2639973 M 15.975095,17.357198 V 3.2317673 m 4.189422,15.2327287 2.038623,0.751857 m 2.945872,1.086457 4.122594,1.52044 M 10.158475,29.129147 C 8.3598554,28.065117 8.4246154,21.215456 8.4246154,21.215456 l 3.4434996,-2.64538 4.10698,-1.21288 4.189422,1.107299 0.67334,6.447772 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 m -4.464342,-7.421401 v 6.855514 m -3.17538,-6.873219 h 6.35076",
  F: "m 20.837897,22.912268 1.896091,-2.051022 m 1.990297,-2.152926 1.398598,-1.512878 m -17.6982676,4.020016 -5.0135,-6.92501 M 11.868115,18.570078 7.0188154,6.2639973 M 15.975095,17.357198 V 3.2317673 m 4.189422,15.2327287 9.107089,3.358754 m -19.113131,7.305897 c -1.7986196,-1.06403 -1.7338596,-7.91369 -1.7338596,-7.91369 l 3.4434996,-2.64538 4.10698,-1.21288 4.189422,1.107298 0.67334,6.447772 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 m -5.988342,-4.444963 h 3.2842 m 0.45247,-3.23263 h -3.81041 v 7.164184",
  R: "M 16.468213,16.203565 21.756182,3.7547803 M 21.805491,17.333364 16.966023,3.2492526 M 10.332446,28.770474 C 8.4123667,27.63459 8.4815,20.322373 8.4815,20.322373 l 3.676038,-2.824022 4.310664,-1.294786 5.337289,1.129799 -0.07249,6.935464 c 0.0043,2.507233 -0.572836,4.003056 -1.499836,4.501646 m -6.948514,-1.123776 v -7.607246 c 1.400249,0 4.127263,-0.186345 4.127263,1.712403 0.0085,1.96952 -1.326694,2.095401 -4.107097,2.140374 2.586319,0.09668 3.814172,1.344046 4.702345,3.660594",
  S: "m 20.837897,22.912268 8.099483,-3.832942 m -20.5127646,2.136132 -5.0135,-6.92501 M 11.868115,18.570078 7.0188154,6.2639973 M 15.975095,17.357198 V 3.2317673 M 20.06102,18.15401 c 2.073092,-2.862483 4.387203,-3.036157 4.249004,2.991997 m -14.151549,7.98314 c -1.7986196,-1.06403 -1.7338596,-7.91369 -1.7338596,-7.91369 l 3.4434996,-2.64538 4.10698,-1.21288 4.085925,0.796812 0.776837,6.758258 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 m -2.127522,-7.819578 c -3.43905,-0.942369 -4.85961,0.295841 -4.73183,1.593915 0.23227,2.359516 4.76409,0.343763 4.79016,3.195652 0.0184,2.008766 -2.13369,2.278271 -4.65031,1.592365",
  LL: "m 16.467611,26.351082 c 0,0.895186 -0.725692,1.620877 -1.620878,1.620877 -0.895186,0 -1.620877,-0.725691 -1.620877,-1.620877 0,-0.895185 0.725691,-1.620877 1.620877,-1.620877 0.895186,0 1.620878,0.725692 1.620878,1.620877 z M 15.045503,20.11376 h 2.018556 m 0.793696,-1.910465 H 14.88148 l -0.03474,6.52691 m 7.154243,-3.505863 3.072193,-9.713926 M 21.534721,15.86461 21.815014,6.2427351 C 21.988187,2.14396 27.073667,3.7109008 25.592314,8.782881 M 9.8508005,27.898211 C 7.8305794,26.703087 7.9033183,19.009508 7.9033183,19.009508 l 3.8677587,-2.971307 4.535484,-1.362314 5.228158,1.188723 0.311223,7.297177 c 0.0045,2.637995 -0.602713,4.211831 -1.57806,4.736424",
  indePext: "m 30.355505,18.339527 c -3.165783,0.807347 -2.256791,2.457661 -2.256791,2.457661 M 18.73659,21.46698 c 0.97097,-1.439438 2.952628,-2.693436 4.93644,-3.47408 2.603045,-1.024317 5.15995,-1.520838 6.028134,-0.792423 0.868184,0.728414 1.054825,2.393264 1.054825,2.393264 l -3.873803,1.793586 c -0.373351,0.363233 -0.546782,0.798742 -1.334163,1.012298 -0.863753,0.708221 -2.347129,1.406235 -2.369165,2.404752 M -1.0272036,13.426643 c 3.6441465,-0.436741 3.7572194,-2.219488 3.7572194,-2.219488 m -0.1775082,4.599186 c -3.21514316,1.092878 -4.0076372,-1.09122 -3.6563752,-3.374974 L 9.9006422,8.690759 C 12.069035,7.4560127 14.39146,7.6312154 14.903409,9.5144904 M 2.4412524,14.73957 c 3.6441465,-0.436741 3.7572193,-2.219488 3.7572193,-2.219488 m -0.9790639,4.815312 c -2.5455551,0.487308 -3.1748285,-1.51054 -2.8548192,-3.5911 L 13.369098,10.003686 c 2.425749,-1.3812925 5.044264,-0.9980947 5.105256,1.566963 M 5.3270164,16.971782 c 3.6441464,-0.43674 3.7572193,-2.219487 3.7572193,-2.219487 m 6.6877203,2.265584 -6.8652285,2.333602 C 5.6915848,20.444359 4.8990902,18.260261 5.2503525,15.976507 L 16.254862,12.235898 c 2.762358,-1.572967 5.774691,-0.857769 4.975558,2.761938",
  indePcur: "m 5.1984272,29.642058 c 4.1640154,-0.956079 4.6502884,1.123443 4.6502884,1.123443 M 16.544934,25.016702 H 8.7219602 c -3.816616,0 -4.2622031,3.262679 -3.408415,5.842972 H 16.641456 M 25.320618,1.2719461 c -0.956078,4.1640155 1.123443,4.6502885 1.123443,4.6502885 M 20.695262,20.967574 V 4.7954788 c 0,-3.81661576 3.26268,-4.26220282 5.842972,-3.4084148 v 16.326273 c 0.554914,1.017131 0.906627,2.061923 0,3.278017"
};

// src/space.js
import { useState as useState2 } from "react";
function isInH2(before, after) {
  const open = before.lastIndexOf("[");
  if (open < 0)
    return false;
  if (open < before.lastIndexOf("]"))
    return false;
  return true;
}
var opposite = {
  F: "B",
  B: "F",
  X: "Y",
  Y: "X",
  H: "L",
  L: "H"
};
function rotate(dir2) {
  if ("HL".includes(dir2))
    return dir2;
  return opposite[dir2];
}
function mirror(dir2) {
  if (dir2 == "Y")
    return "X";
  if (dir2 == "X")
    return "Y";
  return dir2;
}
var dirOrder = ["H", "L", "B", "F", "Y", "X"];
function Direction({ val, set, options }) {
  const invert = options.perspective == "obs";
  function Arrow({ invariant, dir: dir2, path }) {
    if (options.perspective == "obs") {
      dir2 = rotate(dir2);
    }
    const opo = opposite[dir2];
    let cn = "Arrow";
    let click = null;
    if (val === null) {
      cn += " disabled";
    } else if (val.includes(dir2)) {
      cn += " actual";
      click = () => set(val.filter((d) => d != dir2));
    } else if (val.length == 2 || val.includes(opo)) {
      cn += " disabled";
    } else {
      cn += " enabled";
      click = () => set(val.concat([dir2]).sort((a, b) => dirOrder.indexOf(a) - dirOrder.indexOf(b)));
    }
    return <path d={path} className={cn} onClick={click} />;
  }
  return <svg className="w-full h-full" viewBox="90 52 62 58">
    <Arrow dir="F" path="m 133.66599,62.189793 -16.63545,6.86199 8.18301,0.0785 -5.84265,8.538184 7.35789,0.07058 5.84265,-8.538184 8.18299,0.0785 z" />
    <Arrow dir="H" invariant={true} path="m 120.15121,52.244762 -9.71724,10.715056 h 6.70347 v 13.114959 h 6.02754 V 62.959818 h 6.70346 z" />
    <Arrow dir="X" path="m 91.006791,81.042921 5.856436,7.820849 3.351733,-5.395239 h 13.11496 l 3.01377,-4.851221 h -13.11496 l 3.35173,-5.395231 z" />
    <Arrow dir="Y" path="m 150.49164,81.125927 -5.85643,-7.820849 -3.35174,5.395239 h -13.11496 l -3.01377,4.851221 h 13.11496 l -3.35173,5.395231 z" />
    <Arrow dir="L" invariant={true} path="m 121.34719,109.92412 9.71724,-10.715056 h -6.70347 V 86.094105 h -6.02754 v 13.114959 h -6.70346 z" />
    <Arrow dir="B" path="m 107.83243,99.97909 16.63545,-6.86199 -8.18301,-0.0785 5.84265,-8.538184 -7.35789,-0.07059 -5.84264,8.538184 -8.183,-0.0785 z" />
  </svg>;
}
function O2({ done, options }) {
  const [palmar, setPalmar] = useState2([]);
  const [distal, setDistal] = useState2([]);
  const finish = () => done((before, after) => {
    let res = before;
    const H2 = isInH2(before, after);
    if (palmar.length != 0 || distal.length != 0) {
      let p, d;
      if (H2) {
        p = palmar.map(mirror);
        d = distal.map(mirror);
      } else {
        p = palmar;
        d = distal;
      }
      res += p.join("") + d.join("").toLowerCase();
    }
    return [res, after, H2 ? "M" : "L"];
  });
  return <div><table><tbody>
    <tr>
      <th>Palma</th>
      <th>Dedos</th>
    </tr>
    <tr>
      <td><Direction val={palmar} set={setPalmar} options={options} /></td>
      <td><Direction val={distal} set={setDistal} options={options} /></td>
    </tr>
    <tr><td colSpan="2" className="text-right"><button
      className="finish"
      onClick={finish}
    >{"\u2714"}</button></td></tr>
  </tbody></table></div>;
}

// src/body.js
import { useState as useState3 } from "react";
function L({ done, options }) {
  const [name, setName] = useState3(null);
  const [dir2, setDir] = useState3([]);
  const [touch, setTouch] = useState3(false);
  const fixDir = options.perspective == "obs" ? (d) => d : (d) => rotate(d);
  const finish = () => {
    const mod = dir2.join("") + (touch ? "*" : "");
    if (name == "H2") {
      done((before, after) => [before + "[", "]" + mod + after, "Q"]);
    } else {
      done((name || "") + mod, "M");
    }
  };
  return <div className="grid grid-cols-[2fr,1fr,auto] grid-rows-[1fr,auto]">
    <svg
      className="w-full h-full col-start-1 col-end-3 row-start-1 row-end-4"
      viewBox="0 0 83 87"
    >
      <defs><filter id="svgblur"><feGaussianBlur stdDeviation="0.6" /></filter></defs>
      <g filter="url(#svgblur)">{area_paths.map(([thisName, thisDir, path]) => <AreaPath
        key={thisName + thisDir}
        name={thisName}
        dir={fixDir(thisDir)}
        path={path}
        curName={name}
        curDir={dir2}
        setName={setName}
        setDir={setDir}
      />)}</g>
      <BodyOutline />
    </svg>
    <div className="col-start-2 col-end-4 row-start-1"><Direction val={dir2} set={setDir} options={options} /></div>
    <button
      className={`col-start-3 row-start-2 mb-2 ${touch ? "actual" : ""}`}
      onClick={() => setTouch(!touch)}
    >{"\u2733\uFE0F"}</button>
    <button
      className="finish col-start-3 row-start-3 mr-2 mb-2"
      onClick={finish}
    >{"\u2714"}</button>
  </div>;
}
function AreaPath({ name, dir: dir2, path, curName, setName, curDir, setDir }) {
  const isCur = name == curName && (!dir2 && curDir == null || curDir !== null && curDir[0] == dir2 || curDir == dir2);
  const click = isCur ? () => {
    setName(null);
    setDir([]);
  } : () => {
    setName(name);
    setDir(dir2 ? [dir2] : []);
  };
  return <path
    stroke="none"
    fill="none"
    d={path}
    onClick={click}
    className={`Locus ${isCur ? "actual" : ""}`}
  />;
}
function BodyOutline() {
  return <path
    className="BodyOutline"
    fill="none"
    transform="translate(-20.038531,-49.396382)"
    d="m 65.786774,79.959739 c 0.352571,0.0755 0.721401,0.115571 1.101097,0.115571 2.511836,0 4.159713,-1.801395 4.159713,-3.964631 -10e-7,-1.997253 -1.456821,-3.606138 -3.700059,-3.847296 M 45.628492,84.293818 h 7.026058 m -3.513029,-9.841894 v 5.060765 m -16.595325,0.44705 c -0.352571,0.0755 -0.721401,0.115571 -1.101097,0.115571 -2.511836,0 -4.159713,-1.801395 -4.159713,-3.964631 1e-6,-1.997253 1.456821,-3.606138 3.700059,-3.847296 m 30.435826,-1.410447 c 0,1.304516 -1.944091,2.362035 -4.342248,2.362035 -2.398157,0 -4.342248,-1.057519 -4.342248,-2.362035 0,-1.304516 1.944091,-2.362035 4.342248,-2.362035 2.398157,0 4.342248,1.057519 4.342248,2.362035 z m -15.875004,0 c 0,1.304516 -1.944091,2.362035 -4.342248,2.362035 -2.398157,0 -4.342248,-1.057519 -4.342248,-2.362035 0,-1.304516 1.944091,-2.362035 4.342248,-2.362035 2.398157,0 4.342248,1.057519 4.342248,2.362035 z m -1.978366,19.03246 c 0,4.768154 -1.601817,5.09965 -1.601817,5.09965 -9.637633,1.903552 -16.723553,7.693474 -16.723553,14.538004 v 24.20956 m 9.070907,-21.06676 v 21.06676 m 38.727074,-24.20956 v 17.0953 h 14.304737 v -4.52418 c 0,-2.09149 2.553575,-2.11102 2.553575,0 v 2.89314 h 6.293234 c 6.403862,0 6.385782,8.74108 -1.639134,8.74108 l -30.60412,0.004 v -21.06676 m 9.091708,-3.14258 c 2e-6,-6.76312 -6.91835,-12.496561 -16.613496,-14.510985 0,0 -1.900484,-0.297573 -1.900484,-5.065727 M 67.223436,72.682297 c 0,9.986366 -8.095549,18.081915 -18.081915,18.081915 -9.986366,-10e-7 -18.081914,-8.095549 -18.081914,-18.081915 0,-9.986366 8.095548,-18.081914 18.081914,-18.081915 9.986366,0 18.081915,8.095549 18.081915,18.081915 z"
  />;
}
var area_paths = [
  ["Car", null, "M 45.752348,23.17885 A 16.517948,16.517948 0 0 1 29.2344,39.696799 16.517948,16.517948 0 0 1 12.716451,23.17885 16.517948,16.517948 0 0 1 29.2344,6.6609018 16.517948,16.517948 0 0 1 45.752348,23.17885 Z"],
  ["Cue", "X", "m 34.411106,40.761853 a 7.97424,2.7803014 0 0 1 -4.498241,0.614432 4.8848554,4.8850637 0 0 0 -0.858824,2.760556 4.8848554,4.8850637 0 0 0 4.884765,4.884973 4.8848554,4.8850637 0 0 0 4.467235,-2.920235 c -0.658242,-0.179351 -1.330215,-0.342874 -2.017879,-0.485759 0,0 -1.844849,-0.298477 -1.977056,-4.853967 z"],
  ["Cue", "Y", "m 23.663094,40.761853 a 7.9745802,2.7803014 0 0 0 4.498433,0.614432 4.8850637,4.8850637 0 0 1 0.858861,2.760556 4.8850637,4.8850637 0 0 1 -4.884973,4.884973 4.8850637,4.8850637 0 0 1 -4.467426,-2.920235 c 0.65827,-0.179351 1.330272,-0.342874 2.017964,-0.485759 0,0 1.844929,-0.298477 1.977141,-4.853967 z"],
  ["Hom", "X", "m 37.837482,45.952751 a 9.8086366,5.2541222 29.56827 0 0 -0.695047,0.818554 9.8086366,5.2541222 29.56827 0 0 5.938139,9.409761 9.8086366,5.2541222 29.56827 0 0 9.631452,1.580266 C 51.393584,52.380538 45.645678,47.932517 37.837482,45.952751 Z"],
  ["Hom", "Y", "m 20.236947,45.952751 a 5.2541222,9.8086366 60.43173 0 1 0.695047,0.818554 5.2541222,9.8086366 60.43173 0 1 -5.938139,9.409761 5.2541222,9.8086366 60.43173 0 1 -9.6314514,1.580266 C 6.6808456,52.380538 12.428751,47.932517 20.236947,45.952751 Z"],
  ["Bra", null, "m 53.001933,60.682084 c -3.030479,0.862306 -6.060956,1.724615 -9.091435,2.586921 0.03428,4.815554 0.06856,9.631111 0.102836,14.446665 3.729487,-0.134705 7.458977,-0.269407 11.188464,-0.404111 -0.04642,-0.203772 -0.462367,-0.0336 -0.655016,-0.0894 -0.514958,0 -1.029914,0 -1.544873,0 8e-6,-5.513359 1.6e-5,-11.026717 2.4e-5,-16.540075 z"],
  ["Ant", null, "m 53.001933,77.222159 c 0,2.370915 0,4.741828 0,7.112743 4.739418,-7.07e-4 9.478836,-0.0014 14.218253,-0.0021 0,-2.370225 0,-4.740452 0,-7.110677 -4.739417,1.6e-5 -9.478835,3.5e-5 -14.218253,5.1e-5 z"],
  ["Cod", null, "m 46.32172,77.401477 c -0.835623,0.02003 -1.786869,0.16609 -2.4722,0.604264 0,2.110065 0,4.22013 0,6.330195 2.699575,-3.36e-4 5.399153,-7.09e-4 8.098729,-0.0011 0.567991,-2.40175 -0.670973,-5.058312 -2.839789,-6.215282 -0.848527,-0.469691 -1.816933,-0.719222 -2.78674,-0.718119 z"],
  ["H2", null, "m 68.58341,71.121756 c -0.881608,-0.0078 -1.36098,0.945708 -1.276925,1.728695 0,1.457235 0,2.914473 0,4.371708 -0.341738,-0.102841 -0.31787,0.159924 -0.29714,0.419552 0,2.230374 0,4.460751 0,6.691125 2.68528,-0.009 5.371166,0.01693 8.056047,-0.01524 1.975032,-0.0819 4.095271,-0.872461 5.128738,-2.655927 0.946759,-1.541502 0.694913,-3.732432 -0.695377,-4.928219 -1.053582,-0.967055 -2.536847,-1.199073 -3.917379,-1.142743 -1.907013,0 -3.814027,0 -5.72104,0 -0.01556,-1.087583 0.03328,-2.178542 -0.02868,-3.26372 -0.08035,-0.627206 -0.577847,-1.220436 -1.24824,-1.205233 z"],
  ["Pec", "X", "m 45.255085,61.147762 a 9.5417404,9.5417404 0 0 1 -9.54174,9.541741 9.5417404,9.5417404 0 0 1 -9.541741,-9.541741 9.5417404,9.5417404 0 0 1 9.541741,-9.54174 9.5417404,9.5417404 0 0 1 9.54174,9.54174 z"],
  ["Pec", "Y", "m 31.167625,61.147762 a 9.5417404,9.5417404 0 0 1 -9.54174,9.541741 9.5417404,9.5417404 0 0 1 -9.54174,-9.541741 9.5417404,9.5417404 0 0 1 9.54174,-9.54174 9.5417404,9.5417404 0 0 1 9.54174,9.54174 z"],
  ["Tri", null, "M 39.656914,73.805847 A 10.537745,10.537745 0 0 1 29.119168,84.343593 10.537745,10.537745 0 0 1 18.581423,73.805847 10.537745,10.537745 0 0 1 29.119168,63.268102 10.537745,10.537745 0 0 1 39.656914,73.805847 Z"],
  ["Cad", "X", "m 38.656037,74.977852 c -4.933976,-0.16064 -9.415925,4.494572 -9.017002,9.358084 4.738383,0 9.476763,0 14.215147,0 0,-2.571247 0,-5.142494 0,-7.713741 -1.509332,-1.064763 -3.35093,-1.647889 -5.198145,-1.644343 z"],
  ["Cad", "Y", "m 19.418453,74.977852 c -1.752371,0.04299 -3.824045,0.498054 -5.09478,1.67795 0,2.560045 0,5.12009 0,7.680134 4.715302,0 9.430604,0 14.145906,0 0.187439,-3.853725 -2.401134,-7.623889 -6.058278,-8.848089 -0.959396,-0.337043 -1.975965,-0.510326 -2.992848,-0.509995 z"],
  ["Bar", null, "m 28.945519,36.577095 c -2.562448,0.04152 -5.790072,0.787683 -6.877099,3.407026 4.34992,1.842604 9.411424,1.903476 13.803809,0.165365 -0.926581,-2.750722 -4.370795,-3.526877 -6.92671,-3.572391 z"],
  ["Mej", "X", "m 38.611476,32.573214 a 4.2106431,7.0085095 42.949851 0 0 -2.191993,7.355099 18.445804,18.445804 0 0 0 5.880282,-4.217563 18.445804,18.445804 0 0 0 3.646092,-5.773467 4.2106431,7.0085095 42.949851 0 0 -7.334381,2.635931 z"],
  ["Mej", "Y", "m 19.462953,32.573214 a 7.0085095,4.2106431 47.050149 0 1 2.191993,7.355099 18.445804,18.445804 0 0 1 -5.880282,-4.217563 18.445804,18.445804 0 0 1 -3.646092,-5.773467 7.0085095,4.2106431 47.050149 0 1 7.334381,2.635931 z"],
  ["Cab", null, "M 28.935147,12.814888 C 26.372699,12.773368 18.807021,11.820278 17.719994,9.2009348 22.706141,4.0840396 33.843487,3.3721302 40.029883,8.8978775 39.103302,11.6486 31.491062,12.769374 28.935147,12.814888 Z"],
  ["Cab", "X", "M 39.18022,14.910839 A 7.0085095,4.2106431 49.544014 0 0 46.234942,17.93296 18.445804,18.445804 0 0 0 42.720547,11.607251 18.445804,18.445804 0 0 0 37.403978,7.3222781 7.0085095,4.2106431 49.544014 0 0 39.18022,14.910839 Z"],
  ["Cab", "Y", "m 18.894209,14.910839 a 4.2106431,7.0085095 40.455986 0 1 -7.054722,3.022121 18.445804,18.445804 0 0 1 3.514395,-6.325709 18.445804,18.445804 0 0 1 5.316569,-4.2849729 4.2106431,7.0085095 40.455986 0 1 -1.776242,7.5885609 z"],
  ["Ore", "X", "m 47.348012,22.96759 c 0.0037,2.912074 -0.725744,5.827146 -2.036566,8.409297 0.212706,-0.240446 0.202604,-0.846519 0.602575,-0.749594 0.984665,0.111318 2.022972,0.06595 2.923524,-0.387181 1.219205,-0.574516 2.063221,-1.833186 2.157087,-3.174563 0.121092,-1.217009 -0.379613,-2.492713 -1.359813,-3.241055 -0.650774,-0.513255 -1.466133,-0.788797 -2.286807,-0.856904 z"],
  ["Ore", "Y", "m 10.865015,22.96759 a 18.445804,18.445804 0 0 0 2.044319,8.404137 5.3026532,5.3661876 0 0 1 -0.0078,0.0052 c -0.129024,-0.252585 -0.255114,-0.506971 -0.373105,-0.76636 -0.416102,0.0282 -0.78509,0.06821 -1.164785,0.06821 -2.5118344,0 -4.1599534,-1.801379 -4.1599534,-3.964615 3e-6,-1.967154 1.415296,-3.554248 3.6612774,-3.746542 z"],
  ["Nar", null, "m 34.67077,27.433477 a 5.4290991,5.4290991 0 0 1 -5.429099,5.429099 5.4290991,5.4290991 0 0 1 -5.429099,-5.429099 5.4290991,5.4290991 0 0 1 5.429099,-5.429099 5.4290991,5.4290991 0 0 1 5.429099,5.429099 z"],
  ["Boc", null, "m 37.091933,34.874306 a 8.1936769,2.5605254 0 0 1 -8.193677,2.560525 8.1936769,2.5605254 0 0 1 -8.193677,-2.560525 8.1936769,2.5605254 0 0 1 8.193677,-2.560526 8.1936769,2.5605254 0 0 1 8.193677,2.560526 z"],
  ["Ojo", "X", "m 42.219008,21.366301 a 5.2419844,2.9646056 0 0 1 -5.241984,2.964605 5.2419844,2.9646056 0 0 1 -5.241984,-2.964605 5.2419844,2.9646056 0 0 1 5.241984,-2.964606 5.2419844,2.9646056 0 0 1 5.241984,2.964606 z"],
  ["Ojo", "Y", "m 26.364831,21.400551 a 5.2419844,2.9646056 0 0 1 -5.241984,2.964605 5.2419844,2.9646056 0 0 1 -5.241985,-2.964605 5.2419844,2.9646056 0 0 1 5.241985,-2.964606 5.2419844,2.9646056 0 0 1 5.241984,2.964606 z"],
  ["Fre", null, "M 39.349368,12.820174 A 10.227102,4.4972953 0 0 1 29.122266,17.317468 10.227102,4.4972953 0 0 1 18.895164,12.820174 10.227102,4.4972953 0 0 1 29.122266,8.3228765 10.227102,4.4972953 0 0 1 39.349368,12.820174 Z"]
];

// src/dynam.js
import { useState as useState4 } from "react";
function Choice({ val, actual, set, borders = "" }) {
  const cont = val in paths ? <svg style={{
    width: "100%",
    padding: 0,
    fill: "none",
    strokeWidth: 1.25,
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }} viewBox="0 0 32 32"><path d={paths[val]} /></svg> : val;
  return <td className={borders.split("").map((b) => "!border-" + b).join(" ")}><button
    className={actual?.includes(val) ? "actual" : ""}
    onClick={() => set(actual == val ? null : val)}
  >{cont}</button></td>;
}
function Dynam({ done, options }) {
  const [evo, setEvo] = useState4(null);
  const [gir, setGir] = useState4(null);
  const [des, setDes] = useState4(null);
  const [touch, setTouch] = useState4(false);
  const [fore, setFore] = useState4(false);
  const isArc = des && des[0] == "(";
  const [d0, setD0] = useState4([]);
  const [d1, setD1] = useState4([]);
  const finish = () => {
    let res = [];
    let next;
    if (evo) {
      res.push(evo);
    }
    if (gir) {
      next = "O";
      res.push(gir);
    }
    if (des) {
      if (isArc && d1.length != 0) {
        res.push(`(${d0},${d1})`);
      } else if (isArc) {
        res.push(`(${d0})`);
        next = next || "L";
      } else {
        res.push(des);
        next = next || "L";
      }
    }
    if (touch)
      res[res.length - 1] += "*";
    if (!next)
      next = "S";
    res = res.join(":");
    if (fore) {
      done((before, after) => {
        const wordstart = before.lastIndexOf(" ") + 1;
        before = before.substring(0, wordstart) + "_" + before.substring(wordstart);
        return [before + res, after, next];
      });
    } else {
      done(res, next);
    }
  };
  return <div><table><tbody>
    <tr>
      <Choice val="<" actual={evo} set={setEvo} />
      <Choice val=">" actual={evo} set={setEvo} />
      <Choice val={evo?.includes("<") ? "<w" : evo?.includes(">") ? ">w" : "w"} actual={evo} set={setEvo} borders="r" />
      <td />
    </tr>
    <tr>
      <Choice val="^" actual={evo} set={setEvo} borders="b" />
      <Choice val="7" actual={evo} set={setEvo} borders="b" />
      <Choice val="+" actual={evo} set={setEvo} borders="br" />
      <td><button className={fore ? "actual" : ""} onClick={() => setFore(!fore)}>_</button></td>
    </tr>
    <tr>
      <Choice val="$" actual={gir} set={setGir} borders="b" />
      <Choice val="%" actual={gir} set={setGir} borders="b" />
      <Choice val="/" actual={gir} set={setGir} borders="b" />
      <Choice val="8" actual={gir} set={setGir} borders="b" />
    </tr>
    <tr>
      {d0.length > 0 && d1.length > 0 ? <Choice val="()" actual={des} set={setDes} /> : <Choice val="())" actual={des} set={setDes} />}
      <Choice val="->" actual={des} set={setDes} borders="lb" />
      <Choice val="2" actual={des} set={setDes} borders="b" />
      <Choice val="3" actual={des} set={setDes} borders="b" />
    </tr>
    <tr>
      <td colSpan="3"><div className="flex">
        <Direction val={isArc ? d0 : null} set={setD0} options={options} />
        <Direction val={isArc && d0.length != 0 ? d1 : null} set={setD1} options={options} />
      </div></td>
      <td className="!border-l">
        <button
          className={`${touch ? "actual" : ""} mb-3`}
          onClick={() => setTouch(!touch)}
        >{"\u2733\uFE0F"}</button>
        <button
          className="finish"
          disabled={isArc && d0.length == 0}
          onClick={finish}
        >{"\u2714"}</button>
      </td>
    </tr>
  </tbody></table></div>;
}
function Syllab({ done, options }) {
  const [sym, setSym] = useState4(null);
  const [rep, setRep] = useState4(null);
  const finish = () => {
    let ret = [];
    if (sym)
      ret.push(sym);
    if (rep)
      ret.push(rep);
    done(ret.length > 0 ? ret.join(":") : "", "Q");
  };
  return <div><table><tbody>
    <tr>
      <Choice val="=" actual={sym} set={setSym} borders="b" />
      <Choice val="~" actual={sym} set={setSym} borders="b" />
      <Choice val={"&"} actual={sym} set={setSym} borders="b" />
    </tr>
    <tr>
      <Choice val="R" actual={rep} set={setRep} borders="b" />
      <Choice val="N" actual={rep} set={setRep} borders="b" />
      <Choice val="!" actual={rep} set={setRep} borders="b" />
    </tr>
    <tr>
      <td colSpan="2" />
      <td className="!border-l"><button
        className="finish"
        onClick={finish}
      >{"\u2714"}</button></td>
    </tr>
  </tbody></table></div>;
}
var paths = {
  "<": "M 3.2011954,7.4208602 C 2.6702423,11.315035 3.9553799,13.716069 7.0604622,14.056763 M 1.3251764,9.0368347 3.2011954,7.4208602 5.0762134,9.0331147 M 3.2810497,22.353771 c 0,-2.98224 0.7184877,-4.582408 3.561695,-5.098804 m -5.4377131,3.48283 1.8760181,1.615974 1.875019,-1.612254 m -0.8896952,7.329162 c 4.4219156,-1.773567 4.7717813,0.951587 4.7717813,0.951587 m 9.1108402,-6.807949 c -2.175105,-0.587453 -4.770898,-0.799182 -7.361951,-0.32652 -4.0130505,0.732064 -6.3350527,2.674135 -6.7304176,4.278784 -0.3953648,1.604647 0.8174644,3.725347 0.8174644,3.725347 l 6.1926112,-1.402816 c 0.752119,0.106389 1.331051,0.469899 2.441831,0.0438 1.29216,0.07197 3.222799,-0.0046 4.379077,0.739659 M 7.5932034,2.8574272 c 3.9862486,3.396775 5.6921716,1.4110137 5.6921716,1.4110137 M 21.91138,15.848917 9.1563791,9.2079997 C 5.0066253,7.0474222 6.0186522,3.9208894 8.4076591,1.5987094 L 26.505188,11.021226 c 2.024907,0.816742 3.527899,1.958234 4.200751,3.342049",
  ">": "m 5.5423387,25.919325 c 0,2.900005 0.277027,4.064015 2.289009,4.593586 m -4.165028,-2.977612 1.876019,-1.615974 1.875018,1.612254 M 6.2160237,6.7901279 c 0,-2.6803533 0.027374,-5.263137 3.0189863,-5.263137 m -4.8950043,3.647163 1.876018,1.615974 1.875019,-1.612254 M 2.0957893,21.24639 c 4.7643031,0.01711 4.0650138,2.67415 4.0650138,2.67415 M 19.639918,21.541654 C 17.755238,19.850779 14.506992,18.781258 11.423875,18.38198 7.3783826,17.858071 3.5856673,18.064248 2.6165589,19.402919 1.6474513,20.741588 1.9749708,23.16255 1.9749708,23.16255 l 6.1160709,1.160432 c 0.6570946,0.381088 1.05711,0.935425 2.2466023,0.957722 1.473252,0.694783 3.819229,1.15499 4.20515,2.559394 M 3.317005,9.7978219 C 8.1963809,11.70044 9.1572224,9.2652389 9.1572224,9.2652389 M 21.102334,17.378787 6.8752841,15.285256 C 2.2466093,14.60414 2.1779875,11.318612 3.6739167,8.3416892 L 23.860075,11.312112 c 3.822244,0.189203 6.456699,1.846445 6.189961,5.096376",
  ">w": "M 3.5508156,9.8139002 C 5.5011484,3.6990737 12.004564,2.7673332 15.063914,3.023456 M 2.3034909,7.6749757 3.5508156,9.8139002 5.8487399,8.9003332 M 4.4491388,15.270475 c 5.53425,0.07705 5.5729262,-2.421258 5.5729262,-2.421258 M 21.17097,23.866175 c -1.394935,-0.928821 -6.479371,-3.913866 -7.514956,-5.083708 l -4.2357545,0.04103 C 5.3362245,18.863047 3.8846376,17.197502 4.2633879,13.69697 7.1866342,12.803502 9.1919066,12.576702 12.294544,12.56893 M 11.233437,7.9052514 c 4.709789,2.9071866 6.025511,0.7830608 6.025511,0.7830608 M 21.17097,23.866175 C 20.450694,22.352981 17.619773,17.181147 17.331611,15.645593 L 13.67554,13.506332 C 10.150424,11.443695 9.7597365,9.2691822 11.881805,6.4595555 c 3.709786,0.9175664 5.65331,1.9927897 9.659309,4.4967115 M 5.0339513,23.0594 c 4.1102751,-1.077346 3.6091392,-2.868558 3.6091392,-2.868558 m 10.3666945,10.0908 C 18.29121,27.294033 17.872873,25.929707 16.934148,24.648293 15.705301,24.27071 13.385625,24.088019 12.371499,23.464869 L 9.5596015,24.734727 C 6.7129771,26.02027 5.0249753,24.550421 4.5628933,21.974233 7.0295717,20.429125 8.7475123,19.67884 12.261091,18.778304 M 27.091819,4.2547496 c -1.17199,5.1043746 1.37715,5.7004626 1.37715,5.7004626 M 21.421919,30.14536 V 8.5740012 c 0,-4.6785216 3.99949,-5.2247356 7.16249,-4.1781366 V 26.156219 c 0.68023,1.24683 1.111371,2.527567 0,4.018291",
  "<w": "M 16.962425,4.5907446 18.682688,2.7465923 16.991986,0.78516738 M 5.6779759,8.4692792 C 6.8848239,5.318578 10.744467,2.519303 18.682688,2.7465923 M 4.4491389,15.270475 c 5.5342499,0.07705 5.5729261,-2.421258 5.5729261,-2.421258 M 21.17097,23.866175 c -1.394935,-0.928821 -6.479371,-3.913866 -7.514956,-5.083708 l -4.2357541,0.04103 c -4.084035,0.03955 -5.535622,-1.625995 -5.156872,-5.126527 2.923246,-0.893468 4.928519,-1.120268 8.0311561,-1.12804 M 11.233437,7.9052514 c 4.709789,2.9071866 6.025511,0.7830608 6.025511,0.7830608 M 21.17097,23.866175 C 20.450694,22.352981 17.619773,17.181147 17.331611,15.645593 L 13.67554,13.506332 C 10.150424,11.443695 9.7597369,9.2691822 11.881805,6.4595555 c 3.709786,0.9175664 5.65331,1.9927897 9.659309,4.4967115 M 5.0339509,23.0594 c 4.110276,-1.077346 3.60914,-2.868558 3.60914,-2.868558 m 10.3666941,10.0908 C 18.29121,27.294033 17.872873,25.929707 16.934148,24.648293 15.705301,24.27071 13.385625,24.088019 12.371499,23.464869 l -2.8118971,1.269858 c -2.846625,1.285543 -4.534626,-0.184306 -4.996709,-2.760494 2.466679,-1.545108 4.184619,-2.295393 7.6981981,-3.195929 M 27.091819,4.2547496 c -1.17199,5.1043746 1.37715,5.7004626 1.37715,5.7004626 M 21.421919,30.14536 V 8.5740012 c 0,-4.6785216 3.99949,-5.2247356 7.16249,-4.1781366 V 26.156219 c 0.68023,1.24683 1.111371,2.527567 0,4.018291",
  "w": "m 5.8290794,15.61546 c 5.5342496,0.07705 5.5729256,-2.421258 5.5729256,-2.421258 M 20.3435,26.230332 C 18.948565,25.301511 15.748823,20.951948 14.713238,19.782106 L 10.8002,19.168482 C 6.7161654,19.208032 5.2645784,17.542487 5.6433284,14.041955 8.5665744,13.148487 11.402005,13.194202 14.088836,13.661583 M 11.33878,7.0489974 c 4.709789,2.907187 6.451645,1.656841 6.451645,1.656841 M 20.193526,22.072049 C 19.47325,20.558855 17.470562,18.293462 17.1824,16.757908 L 13.67554,13.506332 C 10.635452,10.687549 9.9486924,7.8033384 13.20515,5.5094084 c 3.545733,1.677565 6.034718,4.236341 8.284127,7.5026976 m 5.602542,-8.7573556 c -1.17199,5.104374 1.37715,5.700462 1.37715,5.700462 M 21.421919,30.14536 V 8.5740014 c 0,-4.678521 3.99949,-5.224735 7.16249,-4.178136 V 26.156219 c 0.68023,1.24683 1.111371,2.527567 0,4.018291 M 6.0300862,4.9430842 l 0.573855,2.999281 2.860341,-0.358639 M 16.819295,4.8370018 19.165788,3.0929192 17.321438,0.97368702 M 6.6039412,7.9423652 C 9.0412932,3.5029232 12.916703,1.8597844 19.165788,3.0929192",
  "$": "m 15.52125,17.747778 0,6.713071 m 0,2.829478 0,3.507551 m 7.732319,-5.666509 -0.497456,-3.255187 -3.352653,0.705455 m -7.823294,-0.0153 -3.1060829,-0.673453 -0.569776,2.980096 M 22.756116,21.876106 c -1.726547,4.501113 -11.047023,5.946846 -14.2820329,0.01678 M 21.569541,13.407172 h 6.36988 M 9.1562621,9.7103619 4.5237595,3.2356389 M 12.599762,7.0649819 10.021739,0.88153401 M 16.637742,5.8521019 V 0.74150487 M 21.637401,6.9104319 22.779692,0.93375234 M 9.1562621,9.7103619 l 3.4434999,-2.64538 4.03798,-1.21288 4.999659,1.05833 -0.0679,6.4967401 c 0.004,2.34863 -0.5366,3.74983 -1.40496,4.21688 H 10.890122 C 9.0915021,16.560022 9.1562621,9.7103619 9.1562621,9.7103619 Z",
  "/": "M 1.5841625,11.435967 3.60506,14.656524 6.6646679,12.419164 M 11.971144,6.7976011 14.399801,4.278162 11.603391,2.0568413 M 3.60506,14.656524 C 3.2004478,9.853921 7.0151582,3.9690721 14.3998,4.2781606 m 11.451451,17.1724374 4.545571,-3.46777 M 14.980542,25.570342 7.9752918,23.096935 M 15.997689,21.807944 7.1194584,16.412083 M 18.218914,18.744148 10.900727,9.6290285 M 22.362845,16.777557 17.622778,6.9818276 m -2.642236,18.5885144 1.017147,-3.762398 2.221225,-3.063796 4.143931,-1.966591 3.488378,4.673063 c 1.281451,1.673814 1.658492,2.968018 1.293089,3.774043 l -6.61826,5.049003 c -1.862761,0.219874 -5.54551,-4.703324 -5.54551,-4.703324 z",
  "%": "m 20.848341,21.091589 v 9.695078 M 10.4149,28.662332 l 3.363907,1.407623 1.07455,-3.078049 m 2.399917,-7.870217 0.361852,-3.480662 -3.57119,-0.02793 m -0.265129,14.456855 c -1.969886,-4.128414 -3.156976,-9.475449 3.836317,-14.428929 m 7.972748,-0.198717 5.406448,-1.693282 M 11.462695,15.682949 3.8173958,11.726187 M 13.734934,12.444982 4.644297,3.8776783 M 17.246628,10.280062 11.983602,0.70743083 M 22.742677,9.8111337 19.801983,0.52312708 M 12.833908,18.064934 c -0.815301,-1.28457 -1.371213,-2.381983 -1.371213,-2.381983 v -2e-6 l 2.272239,-3.237967 3.511694,-2.16492 5.496049,-0.4689263 2.845151,5.6311753 c 1.057216,2.027823 1.142606,3.387859 0.479895,4.031564 l -9.314862,2.565843 C 16.173505,21.93276 15.547616,21.470921 14.936095,20.841153",
  "8": "m 15.30788,22.402663 v 2.012776 m 0,3.491897 v 2.865553 m -5.121128,-13.78808 3.44911,-1.156452 1.295277,3.22261 m 9.255826,-11.4603346 -2.615791,2.4165976 2.551418,2.356573 m -10.48673,3.464554 c -4.6703188,4.690714 0.15843,13.979018 9.051778,10.70414 9.99681,-3.681216 10.981969,-18.4541934 -1.116467,-16.525269 m -3.006138,6.554464 5.191744,-2.394462 M 7.0580042,18.21482 1.3060964,14.419569 M 8.8702052,14.764291 1.640111,7.295102 M 11.705417,12.257847 6.9184562,2.043005 M 16.178197,11.241044 13.993643,1.0420002 M 11.445964,24.013074 C 9.5800342,23.821948 7.0580042,18.21482 7.0580042,18.21482 l 1.812201,-3.450529 2.8352118,-2.506444 4.47278,-1.016803 2.386806,5.320663 c 0.886119,1.912737 0.972222,3.257992 0.440034,3.965079 l -5.035146,2.322238",
  "->": "M 2.758808,12.879031 H 20.519174 V 9.810052 l 9.187464,5.942451 -9.187464,6.404895 V 18.67494 H 2.743431",
  "2": "M 4.362507,5.5708982 C 32.210924,0.42005906 30.076403,14.313962 12.034029,21.449952 h 9.685055 v -2.903097 l 8.398763,5.432319 -8.398763,5.855064 V 26.553157 H 5.7342491 c -0.4497757,0 -0.9412602,-0.129342 -0.9316807,-0.69497 L 4.765156,19.860699 C 30.015745,7.6594678 15.650535,8.7735259 4.2982968,10.7617",
  "3": "m 21.751371,10.96049 c 5.602619,4.334143 1.142382,8.00574 3.63092,10.040144 l 2.784633,-2.093286 0.536048,10.602611 -10.405734,-3.183294 2.881152,-2.165842 C 17.621881,19.42971 21.970266,17.784146 19.812641,15.794175 M 6.7195493,15.44354 C 7.8397631,8.0541536 13.322166,5.6410625 16.034715,7.4532795 c 3.948006,2.6376095 -0.04171,9.8351795 -1.888734,8.1968185 -1.01721,-0.902294 0.556218,-2.782937 2.693478,-2.059334 M 2.7994683,14.423073 C 3.2255745,6.3154245 10.958174,0.56083827 16.974644,3.5707827 c 2.586809,1.2941392 8.133263,7.1278913 1.710624,13.5862573 -4.286399,4.310241 -7.199847,1.733175 -8.009092,0.07469 -1.918924,-3.932676 2.271628,-8.408347 6.904705,-7.8129015",
  // arc
  "())": "M 1.6930876,16.225698 C 7.5230136,10.394312 15.111068,7.3155062 24.35913,13.814304 l 1.83776,-2.457899 3.799654,10.26084 -11.193469,-0.372037 2.085359,-2.789048 C 18.253716,16.405214 10.718832,12.911829 3.7710026,21.985742",
  // circle (included in arc)
  "()": "M 15.519067,28.944736 C -0.46615739,28.306243 -1.5911213,7.6481402 10.495604,3.870944 22.58233,0.09374765 29.430372,10.054779 26.348266,19.474832 l 2.849795,1.138988 -8.927787,6.325885 -2.537723,-10.908351 3.233744,1.292444 C 23.114877,14.493553 20.119018,7.4317505 12.938918,9.2937511 5.7588184,11.155751 5.404769,22.963984 16.623615,23.476055"
};

// src/signotator.js
var tabs = {
  Q: Q2,
  O: O2,
  L,
  M: Dynam,
  S: Syllab,
  "\u2699": Options
};
var endSegment = /:|.(?= )/;
function Signotator({ inputRef, updateVal }) {
  const [options, setOptions] = useLocalStorage("signotator-opts", DEF_OPTIONS);
  const [tab, setTab] = useState5("Q");
  const Component = tabs[tab];
  const setCursor = (pos) => {
    const ip = inputRef.current;
    ip.setSelectionRange(pos, pos);
    setTimeout(() => ip.setSelectionRange(pos, pos), 0);
  };
  const clickTab = (tab2) => {
    setTab(tab2);
    if (!"MS".includes(tab2))
      return;
    const ip = inputRef.current;
    const start = ip.selectionStart;
    const end = ip.selectionEnd;
    if (start != end)
      return;
    const before = ip.value.slice(0, start);
    const after = ip.value.slice(end);
    if (!isInH2(before, after))
      return;
    const endseg = after.search(endSegment);
    setCursor(before.length + (endseg >= 0 ? endseg + 1 : after.length));
  };
  const appendSN = (SN, nextTab) => {
    const ip = inputRef.current;
    const start = ip.selectionStart;
    const end = ip.selectionEnd;
    let before = ip.value.slice(0, start);
    let after = ip.value.slice(end);
    if (SN.length > 0 && before.length > 0 && !":[ ".includes(before[before.length - 1])) {
      before = before + ":";
    }
    if (SN.length > 0 && after.length > 0 && !":] ".includes(after[0])) {
      after = ":" + after;
    }
    if (typeof SN == "function") {
      [before, after, nextTab] = SN(before, after);
    } else {
      before = before + SN;
    }
    updateVal(before + after);
    setTab(nextTab);
    if (isInH2(before, after) && "MS".includes(nextTab)) {
      const endseg = after.search(endSegment);
      setCursor(before.length + (endseg >= 0 ? endseg + 1 : after.length));
    } else {
      setCursor(before.length);
    }
  };
  return <div className="Signotator" onClick={(e) => {
    e.preventDefault();
    e.stopPropagation();
    inputRef.current.focus();
  }}>
    <nav>{Object.keys(tabs).map((seg) => <button
      key={seg}
      disabled={tab == seg}
      onClick={() => clickTab(seg)}
    >{seg}</button>)}</nav>
    <Component done={appendSN} options={options} setOptions={setOptions} />
  </div>;
}
function Options({ options, setOptions }) {
  function set(pref, val) {
    setOptions({ ...options, [pref]: val });
  }
  function Radio({ text, pref, val }) {
    return <label onClick={() => set(pref, val)}>
      <input
        type="radio"
        name={pref}
        value={val}
        onChange={(e) => set(pref, e.target.value)}
        checked={options[pref] == val}
      />
      {" "}
      {text}
    </label>;
  }
  return <div><table><tbody><tr>
    <th>Perspectiva:</th>
    <td><Radio pref="perspective" text="Observador" val="obs" /></td>
    <td><Radio pref="perspective" text="Signante" val="sign" /></td>
  </tr></tbody></table></div>;
}
var DEF_OPTIONS = {
  perspective: "sign"
};
function useLocalStorage(key, def) {
  let stored;
  try {
    stored = JSON.parse(localStorage.getItem(key));
  } catch {
  }
  if (stored === void 0 || stored === null)
    stored = def;
  const [val, set] = useState5(stored);
  return [val, (new_val) => {
    localStorage.setItem(key, JSON.stringify(new_val));
    set(new_val);
  }];
}
export {
  Signotation,
  Signotator
};
